<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fireworks Display</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: black;
        }
        canvas {
            display: block;
        }
        #startButton {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px 40px;
            font-size: 1.5em;
            color: white;
            background-color: red;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }
        #countdown {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 5em;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="fireworksCanvas"></canvas>
    <button id="startButton">Start</button>
    <div id="countdown"></div>
    <script>
        const canvas = document.getElementById('fireworksCanvas');
        const ctx = canvas.getContext('2d');
        const startButton = document.getElementById('startButton');
        const countdown = document.getElementById('countdown');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const gravity = 0.1; // Trọng lực

        class Particle {
            constructor(x, y, vx, vy, color, size, sparkle) {
                this.x = x;
                this.y = y;
                this.vx = vx;
                this.vy = vy;
                this.color = color;
                this.alpha = 1;
                this.size = size;
                this.sparkle = sparkle; // Thêm thuộc tính lấp lánh
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.vy += gravity; // Áp dụng trọng lực
                this.alpha -= 0.01;

                // Hiệu ứng lấp lánh
                if (this.sparkle) {
                    this.alpha = Math.random() > 0.5 ? 1 : 0.5;
                }
            }

            draw() {
                ctx.globalAlpha = this.alpha;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        class Firework {
            constructor(x, y, type) {
                this.x = x;
                this.y = canvas.height;
                this.targetY = y;
                this.type = type; // Loại pháo hoa
                this.particles = [];
                this.exploded = false;
                this.color = this.getColor(type);
            }

            getColor(type) {
                const colorSets = {
                    'chrysanthemum': ["#FF5733", "#FFF333", "#FF33A8"],
                    'peony': ["#33FF57", "#33FFF3"],
                    'willow': ["#FFD700", "#FFB6C1"],
                    'sparkler': ["#FF69B4", "#DA70D6"],
                    'palm': ["#800080","#9932CC","#BA55D3"],
                    'ring': ["#000080", "#0000FF", "#00BFFF"],
                    'crossette': ["#FFFF00", "#FF00FF", "#800000"],
                    'strobe': ["#FFFAFA", "#F0FFF0", "#F5FFFA"],
                    'fish': ["#2E8B57", "#3CB371", "#98FB98"],
                };
                return colorSets[type] || ["#FFFFFF"];
            }

            update() {
                if (!this.exploded) {
                    this.y -= 10;
                    if (this.y <= this.targetY) {
                        this.exploded = true;
                        this.createParticles();
                    }
                } else {
                    this.particles.forEach(p => p.update());
                    this.particles = this.particles.filter(p => p.alpha > 0);
                }
            }

            createParticles() {
                const particleCount = 100;
                for (let i = 0; i < particleCount; i++) {
                    let vx, vy, size, sparkle;
                    const angle = Math.random() * Math.PI * 2;

                    switch (this.type) {
                        case 'chrysanthemum':
                            const speed = Math.random() * 4 + 2;
                            vx = Math.cos(angle) * speed;
                            vy = Math.sin(angle) * speed;
                            size = Math.random() * 2 + 1;
                            sparkle = false;
                            break;
                        case 'peony':
                            vx = Math.cos(angle) * (Math.random() * 3 + 1);
                            vy = Math.sin(angle) * (Math.random() * 3 + 1);
                            size = Math.random() * 2 + 1;
                            sparkle = false;
                            break;
                        case 'willow':
                            vx = Math.cos(angle) * 2;
                            vy = Math.sin(angle) * 2 + 1; // Hơi hướng xuống
                            size = Math.random() * 1.5 + 1;
                            sparkle = true;
                            break;
                        case 'sparkler':
                            vx = Math.cos(angle) * (Math.random() * 5);
                            vy = Math.sin(angle) * (Math.random() * 5);
                            size = Math.random() * 3;
                            sparkle = true;
                            break;
                        case 'palm':
                            vx = Math.cos(angle) * (Math.random() * 2 + 2);
                            vy = Math.sin(angle) * (Math.random() * 2 + 3);
                            size = Math.random() * 2 + 1;
                            sparkle = true;
                            break;
                        case 'ring':
                            vx = Math.cos(angle) * 4;
                            vy = Math.sin(angle) * (Math.random() * 2);
                            size = Math.random() * 2 + 1;
                            sparkle = false;
                            break;
                        case 'crossette':
                            vx = Math.cos(angle) * (Math.random() * 3 + 2);
                            vy = Math.sin(angle) * (Math.random() * 3 + 2);
                            size = Math.random() * 1.5 + 1;
                            sparkle = false;
                            if (i % 4 === 0) {
                                // Tạo ra 4 hạt nhỏ hơn sau khi crossette nổ
                                for (let j = 0; j < 4; j++) {
                                    const subAngle = angle + (j * Math.PI / 2);
                                    const subVx = Math.cos(subAngle) * 2;
                                    const subVy = Math.sin(subAngle) * 2;
                                    this.particles.push(new Particle(this.x, this.targetY, subVx, subVy, this.color[Math.floor(Math.random() * this.color.length)], 1, false));
                                }
                            }
                            break;
                        case 'strobe':
                            vx = Math.cos(angle) * (Math.random() * 3 + 1);
                            vy = Math.sin(angle) * (Math.random() * 3 + 1);
                            size = Math.random() * 2 + 1;
                            sparkle = true;
                            break;
                        case 'fish':
                            vx = Math.cos(angle) * (Math.random() * 3 + 2);
                            vy = Math.sin(angle) * (Math.random() * 1.5 + 1);
                            size = Math.random() * 1.5 + 1;
                            sparkle = true;
                            break;
                    }

                    const color = this.color[Math.floor(Math.random() * this.color.length)];
                    this.particles.push(new Particle(this.x, this.targetY, vx, vy, color, size, sparkle));
                }
            }

            draw() {
                if (!this.exploded) {
                    ctx.fillStyle = "white";
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 4, 0, Math.PI * 2);
                    ctx.fill();
                } else {
                    this.particles.forEach(p => p.draw());
                }
            }
        }

        const fireworks = [];
        const fireworkTypes = ['chrysanthemum', 'peony', 'willow', 'sparkler','palm','ring','crossette','strobe','fish'];

        function createFirework() {
            const x = Math.random() * canvas.width;
            const y = Math.random() * canvas.height / 3;
            const type = fireworkTypes[Math.floor(Math.random() * fireworkTypes.length)];
            fireworks.push(new Firework(x, y, type));
        }

        function animate() {
            ctx.globalAlpha = 0.1;
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            fireworks.forEach((firework, index) => {
                firework.update();
                firework.draw();
                if (firework.particles.length === 0 && firework.exploded) {
                    fireworks.splice(index, 1);
                }
            });

            requestAnimationFrame(animate);
        }

        function startCountdown() {
            let count = 3;
            startButton.style.display = 'none';
            countdown.style.display = 'block';
            countdown.textContent = count;

            const interval = setInterval(() => {
                count--;
                if (count > 0) {
                    countdown.textContent = count;
                } else {
                    clearInterval(interval);
                    countdown.style.display = 'none';
                    setInterval(createFirework, 500);
                    animate();
                }
            }, 1000);
        }

        startButton.addEventListener('click', startCountdown);
    </script>
</body>
</html>
